// scripts/setup-youtube.js
const fs = require('fs');
const path = require('path');
const childProcess = require('child_process');

console.log('üéµ Configuration du service audio am√©lior√© pour Devine la Zik üéµ');

// V√©rifier les d√©pendances n√©cessaires
const dependencies = [
    'ytdl-core',
    'youtube-sr',
    'play-dl'
];

console.log('üì¶ V√©rification des d√©pendances...');

let needsInstall = false;
try {
    const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));

    for (const dep of dependencies) {
        if (!packageJson.dependencies[dep]) {
            console.log(`‚ùå D√©pendance manquante: ${dep}`);
            needsInstall = true;
        } else {
            console.log(`‚úÖ D√©pendance trouv√©e: ${dep}`);
        }
    }
} catch (error) {
    console.error('‚ùå Erreur lors de la lecture du package.json:', error.message);
    needsInstall = true;
}

if (needsInstall) {
    console.log('üì• Installation des d√©pendances manquantes...');
    try {
        childProcess.execSync(`npm install ${dependencies.join(' ')} --save`, { stdio: 'inherit' });
        console.log('‚úÖ D√©pendances install√©es avec succ√®s');
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'installation des d√©pendances:', error.message);
        process.exit(1);
    }
}

// Cr√©er les r√©pertoires n√©cessaires
const directories = [
    './lib'
];

for (const dir of directories) {
    if (!fs.existsSync(dir)) {
        console.log(`üìÅ Cr√©ation du r√©pertoire ${dir}...`);
        fs.mkdirSync(dir, { recursive: true });
    }
}

// Cr√©er les fichiers n√©cessaires
const files = [
    {
        path: './lib/enhancedYoutubeService.js',
        content: `// lib/enhancedYoutubeService.js
const ytdl = require('ytdl-core');
const ytsr = require('youtube-sr').default;

/**
 * Service d'extraction audio YouTube sans utiliser l'API officielle
 * Inspir√© de l'approche utilis√©e par Spotube
 */
class EnhancedYoutubeService {
  /**
   * Recherche une vid√©o YouTube et retourne l'URL de pr√©visualisation audio
   * @param {string} query - Requ√™te de recherche (artiste + titre)
   * @returns {Promise<Object>} - Informations audio avec URL de pr√©visualisation
   */
  async getAudioPreviewUrl(query) {
    try {
      console.log(\`Recherche audio pour: \${query}\`);
      
      // Ajout de mots-cl√©s pour am√©liorer la recherche
      const searchQuery = \`\${query} audio official\`;
      
      // Rechercher la vid√©o sans utiliser l'API YouTube
      const searchResults = await ytsr.search(searchQuery, { limit: 3, type: 'video' });
      
      if (!searchResults || searchResults.length === 0) {
        console.warn(\`Aucun r√©sultat trouv√© pour: \${searchQuery}\`);
        return null;
      }
      
      // Prendre le premier r√©sultat de la recherche
      const bestMatch = searchResults[0];
      const videoId = bestMatch.id;
      
      console.log(\`Meilleure correspondance: "\${bestMatch.title}" (\${videoId})\`);
      
      // Obtenir le flux audio uniquement
      const videoInfo = await ytdl.getInfo(videoId);
      
      // Filtrer pour obtenir le format audio avec la meilleure qualit√©
      const audioFormats = ytdl.filterFormats(videoInfo.formats, 'audioonly');
      if (audioFormats.length === 0) {
        console.warn(\`Aucun format audio trouv√© pour \${videoId}\`);
        return null;
      }
      
      // Trouver le format avec la meilleure qualit√© audio
      const bestAudioFormat = audioFormats.reduce((prev, curr) => 
        (prev.audioBitrate || 0) > (curr.audioBitrate || 0) ? prev : curr
      );
      
      // Cr√©er le point de d√©part al√©atoire pour √©viter de spoiler le d√©but
      const startTime = Math.floor(Math.random() * 30) + 15;
      
      // Deux options pour utiliser le flux:
      
      // 1. URL directe pour le streaming (expire apr√®s un certain temps)
      const directAudioUrl = bestAudioFormat.url;
      
      // 2. URL d'un lecteur YouTube int√©gr√© avec param√®tres de contr√¥le
      const embedUrl = \`https://www.youtube.com/embed/\${videoId}?autoplay=1&start=\${startTime}&end=\${startTime + 30}&controls=0&enablejsapi=1\`;
      
      return {
        videoId,
        title: bestMatch.title,
        channelName: bestMatch.channel?.name || 'Unknown',
        thumbnailUrl: bestMatch.thumbnail?.url,
        duration: bestMatch.duration,
        directAudioUrl,   // URL pour streaming direct (meilleure option)
        embedUrl,         // URL iframe YouTube (option de secours)
        format: bestAudioFormat.mimeType,
        bitrate: bestAudioFormat.audioBitrate,
        contentLength: bestAudioFormat.contentLength,
        isLive: videoInfo.videoDetails.isLiveContent,
        startTime,
        previewSource: 'youtube'
      };
    } catch (error) {
      console.error('Erreur lors de l\\'extraction audio YouTube:', error);
      return null;
    }
  }
  
  /**
   * G√©n√®re une URL proxy pour l'audio (pour √©viter les probl√®mes CORS c√¥t√© client)
   * @param {string} videoId - ID de la vid√©o YouTube
   * @returns {string} - URL du proxy pour le streaming audio
   */
  getProxyUrl(videoId) {
    return \`/api/audio-proxy?videoId=\${videoId}\`;
  }
  
  /**
   * Obtient les m√©tadonn√©es et l'URL d'aper√ßu audio pour une chanson
   * @param {string} artistName - Nom de l'artiste
   * @param {string} trackName - Nom de la piste
   * @returns {Promise<Object|null>} - Informations d'aper√ßu ou null si non trouv√©
   */
  async getSongPreview(artistName, trackName) {
    const query = \`\${artistName} \${trackName}\`;
    return this.getAudioPreviewUrl(query);
  }
  
  /**
   * Obtient les m√©tadonn√©es et l'URL d'aper√ßu audio pour un artiste
   * @param {string} artistName - Nom de l'artiste
   * @returns {Promise<Object|null>} - Informations d'aper√ßu ou null si non trouv√©
   */
  async getArtistPreview(artistName) {
    // Essayer de trouver un titre populaire de l'artiste
    const query = \`\${artistName} popular song\`;
    return this.getAudioPreviewUrl(query);
  }
}

module.exports = new EnhancedYoutubeService();`
    },
    {
        path: './lib/audioPreviewEnhancer.js',
        content: `// lib/audioPreviewEnhancer.js
const enhancedYoutubeService = require('./enhancedYoutubeService');

/**
 * Am√©liore les questions avec des aper√ßus audio de diverses sources
 * @param {Array} questions - Tableau des questions du jeu
 * @param {Object} options - Options de configuration
 * @returns {Promise<Array>} - Questions am√©lior√©es avec aper√ßus
 */
async function enhanceAudioPreviews(questions, options = {}) {
  const enhancedQuestions = [...questions];
  let previewCount = 0;

  // Suivi de la progression pour l'indicateur de chargement
  const totalQuestions = enhancedQuestions.length;
  let processedCount = 0;

  // Traiter chaque question pour ajouter une URL de pr√©visualisation
  for (const question of enhancedQuestions) {
    processedCount++;

    // Ignorer si la question a d√©j√† une URL de pr√©visualisation
    if (question.previewUrl) {
      previewCount++;
      continue;
    }

    // Pour les questions de type chanson ou artiste, essayer de trouver de l'audio
    if ((question.type === 'song' || question.type === 'artist') && question.artistName) {
      try {
        // Choisir la m√©thode de recherche en fonction du type de question
        const audioPreview = question.type === 'song'
          ? await enhancedYoutubeService.getSongPreview(question.artistName, question.answer)
          : await enhancedYoutubeService.getArtistPreview(question.artistName);

        if (audioPreview) {
          // Utiliser l'URL directe pour le streaming si disponible
          if (audioPreview.directAudioUrl) {
            question.previewUrl = audioPreview.directAudioUrl;
            question.previewSource = 'youtube_direct';
          } 
          // Sinon, utiliser l'URL d'int√©gration YouTube
          else if (audioPreview.embedUrl) {
            question.previewUrl = audioPreview.embedUrl;
            question.previewSource = 'youtube_embed';
            
            // Ajouter des param√®tres pour am√©liorer l'exp√©rience d'√©coute
            if (question.previewUrl.includes('youtube.com/embed/')) {
              // D√©j√† configur√© lors de la cr√©ation dans enhancedYoutubeService
            }
          }
          
          // Ajouter d'autres m√©tadonn√©es utiles
          question.previewMetadata = {
            videoId: audioPreview.videoId,
            title: audioPreview.title,
            channelName: audioPreview.channelName,
            thumbnailUrl: audioPreview.thumbnailUrl
          };
          
          previewCount++;
        }
      } catch (error) {
        console.error(\`Erreur lors de la r√©cup√©ration de l'aper√ßu pour \${question.answer}:\`, error);
      }
    }

    // Mettre √† jour la progression si le callback est fourni
    if (options.onProgress) {
      options.onProgress({
        processed: processedCount,
        total: totalQuestions,
        withPreview: previewCount
      });
    }
  }

  console.log(\`Questions am√©lior√©es: \${previewCount}/\${totalQuestions} avec pr√©visualisations\`);
  return enhancedQuestions;
}

module.exports = {
  enhanceAudioPreviews
};`
    },
    {
        path: './pages/api/audio-proxy.js',
        content: `// pages/api/audio-proxy.js
import ytdl from 'ytdl-core';

/**
 * Endpoint API servant de proxy pour les flux audio YouTube
 * Permet d'√©viter les probl√®mes CORS et de cacher la logique d'extraction
 */
export default async function handler(req, res) {
  // Uniquement accepter les requ√™tes GET
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { videoId } = req.query;

  if (!videoId) {
    return res.status(400).json({ error: 'Missing videoId parameter' });
  }

  try {
    // Obtenir les informations de la vid√©o
    const info = await ytdl.getInfo(videoId);

    // Filtrer pour n'avoir que les formats audio
    const audioFormats = ytdl.filterFormats(info.formats, 'audioonly');

    if (audioFormats.length === 0) {
      return res.status(404).json({ error: 'No audio stream found' });
    }

    // Obtenir le format avec la meilleure qualit√© audio
    const audioFormat = audioFormats.reduce((prev, curr) => {
      return (prev.audioBitrate || 0) > (curr.audioBitrate || 0) ? prev : curr;
    });

    // Option 1: Redirection (plus simple, mais moins de contr√¥le)
    res.redirect(audioFormat.url);

    // Option 2: Streaming du contenu (n√©cessite plus de ressources serveur)
    /*
    // D√©finir les headers de r√©ponse
    res.setHeader('Content-Type', audioFormat.mimeType);
    res.setHeader('Content-Length', audioFormat.contentLength);
    res.setHeader('Accept-Ranges', 'bytes');
    
    // Cr√©er un flux de la vid√©o et le transf√©rer √† la r√©ponse
    const audioStream = ytdl(videoId, { 
      format: audioFormat,
      range: req.headers.range,
    });
    
    // G√©rer les erreurs de flux
    audioStream.on('error', (err) => {
      console.error('Stream error:', err);
      if (!res.headersSent) {
        res.status(500).json({ error: 'Streaming error' });
      }
    });
    
    // Transf√©rer le flux audio √† la r√©ponse
    audioStream.pipe(res);
    */

  } catch (error) {
    console.error('Error extracting YouTube audio:', error);
    return res.status(500).json({ error: 'Failed to extract audio stream' });
  }
}`
    }
];

for (const file of files) {
    try {
        console.log(`üìù Cr√©ation de ${file.path}...`);
        fs.writeFileSync(file.path, file.content);
        console.log(`‚úÖ Fichier cr√©√© avec succ√®s: ${file.path}`);
    } catch (error) {
        console.error(`‚ùå Erreur lors de la cr√©ation du fichier ${file.path}:`, error.message);
    }
}

// Support pour play-dl (API alternative √† YouTube)
console.log('üîÑ Configuration du support pour play-dl...');
try {
    const playDlConfig = {
        path: './lib/playDlService.js',
        content: `// lib/playDlService.js
const play = require('play-dl');

/**
 * Service utilisant play-dl pour l'extraction audio YouTube
 * Une alternative √† ytdl-core qui contourne certaines limitations
 */
class PlayDlService {
  /**
   * Recherche et extrait l'URL de streaming d'une piste audio
   * @param {string} query - Requ√™te de recherche (artiste + titre)
   * @returns {Promise<Object>} - Donn√©es audio avec URL de streaming
   */
  async getAudioUrl(query) {
    try {
      console.log(\`[play-dl] Recherche pour: \${query}\`);
      
      // Rechercher la vid√©o
      const searchResults = await play.search(query, { limit: 3 });
      
      if (!searchResults || searchResults.length === 0) {
        console.warn(\`[play-dl] Aucun r√©sultat trouv√© pour: \${query}\`);
        return null;
      }
      
      const video = searchResults[0];
      console.log(\`[play-dl] Meilleure correspondance: "\${video.title}"\`);
      
      // Obtenir les informations de streaming
      const streamInfo = await play.stream(video.url);
      
      // Calculer le temps de d√©part pour √©viter de spoiler le d√©but
      const startTime = Math.floor(Math.random() * 30) + 15;
      
      return {
        title: video.title,
        videoId: video.id,
        channelName: video.channel?.name,
        thumbnailUrl: video.thumbnails[0]?.url,
        duration: video.durationInSec,
        directAudioUrl: streamInfo.url, // URL directe (peut expirer)
        startTime,
        audioFormat: streamInfo.type,
        previewSource: 'play-dl'
      };
    } catch (error) {
      console.error('[play-dl] Erreur:', error);
      return null;
    }
  }
  
  /**
   * Obtient les m√©tadonn√©es et l'URL d'aper√ßu audio pour une chanson
   * @param {string} artistName - Nom de l'artiste
   * @param {string} trackName - Nom de la piste
   * @returns {Promise<Object|null>} - Informations d'aper√ßu ou null si non trouv√©
   */
  async getSongPreview(artistName, trackName) {
    const query = \`\${artistName} \${trackName} audio\`;
    return this.getAudioUrl(query);
  }
  
  /**
   * Obtient les m√©tadonn√©es et l'URL d'aper√ßu audio pour un artiste
   * @param {string} artistName - Nom de l'artiste
   * @returns {Promise<Object|null>} - Informations d'aper√ßu ou null si non trouv√©
   */
  async getArtistPreview(artistName) {
    const query = \`\${artistName} popular song audio\`;
    return this.getAudioUrl(query);
  }
}

module.exports = new PlayDlService();`
    };

    fs.writeFileSync(playDlConfig.path, playDlConfig.content);
    console.log(`‚úÖ Support play-dl configur√©: ${playDlConfig.path}`);
} catch (error) {
    console.error('‚ùå Erreur lors de la configuration de play-dl:', error.message);
}

// Cr√©er un fichier de fusion qui combine les approches
console.log('üîÑ Cr√©ation du service audio combin√©...');
try {
    const combinedServicePath = './lib/audioPreviewService.js';
    const combinedServiceContent = `// lib/audioPreviewService.js
const enhancedYoutubeService = require('./enhancedYoutubeService');
const playDlService = require('./playDlService');

/**
 * Service combin√© qui utilise plusieurs approches pour obtenir des pr√©visualisations audio
 * Tente plusieurs m√©thodes en cas d'√©chec de l'une d'entre elles
 */
class AudioPreviewService {
  /**
   * Obtient les m√©tadonn√©es et l'URL d'aper√ßu audio pour une chanson
   * @param {string} artistName - Nom de l'artiste
   * @param {string} trackName - Nom de la piste
   * @returns {Promise<Object|null>} - Informations d'aper√ßu ou null si non trouv√©
   */
  async getSongPreview(artistName, trackName) {
    try {
      // Essayer d'abord avec ytdl-core
      const ytPreview = await enhancedYoutubeService.getSongPreview(artistName, trackName);
      if (ytPreview && (ytPreview.directAudioUrl || ytPreview.embedUrl)) {
        console.log('‚úÖ Aper√ßu trouv√© avec ytdl-core');
        return ytPreview;
      }
      
      // Si √©chec, essayer avec play-dl
      console.log('‚ö†Ô∏è ytdl-core a √©chou√©, essai avec play-dl...');
      const playDlPreview = await playDlService.getSongPreview(artistName, trackName);
      if (playDlPreview && playDlPreview.directAudioUrl) {
        console.log('‚úÖ Aper√ßu trouv√© avec play-dl');
        return playDlPreview;
      }
      
      console.warn('‚ùå Aucun aper√ßu trouv√© pour la chanson');
      return null;
    } catch (error) {
      console.error('Erreur lors de la recherche d\\'aper√ßu de chanson:', error);
      return null;
    }
  }
  
  /**
   * Obtient les m√©tadonn√©es et l'URL d'aper√ßu audio pour un artiste
   * @param {string} artistName - Nom de l'artiste
   * @returns {Promise<Object|null>} - Informations d'aper√ßu ou null si non trouv√©
   */
  async getArtistPreview(artistName) {
    try {
      // Essayer d'abord avec ytdl-core
      const ytPreview = await enhancedYoutubeService.getArtistPreview(artistName);
      if (ytPreview && (ytPreview.directAudioUrl || ytPreview.embedUrl)) {
        console.log('‚úÖ Aper√ßu d\\'artiste trouv√© avec ytdl-core');
        return ytPreview;
      }
      
      // Si √©chec, essayer avec play-dl
      console.log('‚ö†Ô∏è ytdl-core a √©chou√©, essai avec play-dl...');
      const playDlPreview = await playDlService.getArtistPreview(artistName);
      if (playDlPreview && playDlPreview.directAudioUrl) {
        console.log('‚úÖ Aper√ßu d\\'artiste trouv√© avec play-dl');
        return playDlPreview;
      }
      
      console.warn('‚ùå Aucun aper√ßu trouv√© pour l\\'artiste');
      return null;
    } catch (error) {
      console.error('Erreur lors de la recherche d\\'aper√ßu d\\'artiste:', error);
      return null;
    }
  }
}

module.exports = new AudioPreviewService();`;

    fs.writeFileSync(combinedServicePath, combinedServiceContent);
    console.log(`‚úÖ Service audio combin√© cr√©√©: ${combinedServicePath}`);
} catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du service combin√©:', error.message);
}